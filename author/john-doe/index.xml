<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>John Doe on L1NNA</title>
    <link>https://l1nna.com/author/john-doe/</link>
    <description>Recent content in John Doe on L1NNA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Oct 2019 14:51:12 +0600</lastBuildDate>
    
	<atom:link href="https://l1nna.com/author/john-doe/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Assembly Code Data Mining</title>
      <link>https://l1nna.com/project/assembly-code-data-mining/</link>
      <pubDate>Sat, 12 Oct 2019 14:51:12 +0600</pubDate>
      
      <guid>https://l1nna.com/project/assembly-code-data-mining/</guid>
      <description>&lt;p&gt;Assembly clone search greatly reduces the manual effort of reverse engineering since it can &lt;em&gt;identify the cloned parts that have been previously analyzed&lt;/em&gt;. By closely collaborating with reverse engineers, I studied the challenges, designed and implemented an award-winning clone search engine called &lt;a href=&#34;https://github.com/McGill-DMaS/Kam1n0-Community&#34;&gt;Kam1n0&lt;/a&gt;. It also includes specialized techniques that can mitigate the variance introduced by different processor families, different compilers, optimization techniques, and binary protection techniques. Kam1n0 has been presented at the Smart Cybersecurity Network Canada (SERENE-RISC), SOPHOS, ESET, Above Security, and Google.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Malware Phenotype Decomposition</title>
      <link>https://l1nna.com/project/malware-phenotype-analysis/</link>
      <pubDate>Thu, 12 Sep 2019 14:51:12 +0600</pubDate>
      
      <guid>https://l1nna.com/project/malware-phenotype-analysis/</guid>
      <description>&lt;p&gt;Malware Phenotypes denote observable characteristics of individual malware such as specific observal patterns in code, string, header, and api, etc. Given a piece of unknown malware, the proposed system is able to quickly &lt;em&gt;decompose the malware into existing known components or malware families based on the observable characterstics&lt;/em&gt; in code, string, header, api, and import modules, etc. These characteristics provide malware reverse engineers a natural and intuitive information to distinguish one malware family from the others. The proposed research under this direction aims at developing a scalable reality malware Phenotype retrieval system for security analysts.  This problem is challenging given the time constrains as well as the number of malware being collected perday. In large organizations or security companies, this number can exceed 300,000 unique samples per day. Having an accurate matching system, scalable and efficient index, and optimized storage requirements is the key to have a practical and successful system for this problem.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Software Ecosystem Genetic Analysis</title>
      <link>https://l1nna.com/project/binary-genetic-analysis/</link>
      <pubDate>Mon, 12 Aug 2019 14:51:12 +0600</pubDate>
      
      <guid>https://l1nna.com/project/binary-genetic-analysis/</guid>
      <description>&lt;p&gt;In the context of cybersecurity, the key to understanding the massive binary executables communicated over the network and the running processes on every single IoT device is to understand the actual machine instructions that are being executed. All the machine instructions from software are generated by the human-written code. &lt;em&gt;Resembling a biological evolutionary process, software is not created from scratch but evolves over time.&lt;/em&gt; Studies have shown that 50% of all the files across open source projects have been reused at least twice, and more than 50% of the developers modify the components before reusing them. Software ecosystem is highly complex with interconnected information including source code, binary executables, documentation, comments, descriptions, vulnerabilities, and specifications, etc. All these interconnected entities form a heterogeneous information network. The ultimate task is to learn a robust latent vector representation for every defined entity in this network. The learned vector captures the semantic as well as the syntactic relationship between entities of different granularity to their neighbors. The learned representation enables us to match similar entities and observe the hierarchical relationship among entities on different granularity. They directly contribute to the source code and binary code clone search problems.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Authorship Analysis</title>
      <link>https://l1nna.com/project/authorship-analysis/</link>
      <pubDate>Wed, 12 Sep 2018 14:51:12 +0600</pubDate>
      
      <guid>https://l1nna.com/project/authorship-analysis/</guid>
      <description>&lt;p&gt;The internet provides an ideal anonymous channel for concealing computer-mediated malicious activities, as the network-based origins of critical electronic textual evidence (e.g., emails, blogs, forum posts, chat logs, etc.) can be easily repudiated. Given the anonymous documents, &lt;em&gt;authorship analysis is the study of identifying the actual author and his/her socio-linguistic characteristics.&lt;/em&gt; Many linguistic stylometric features and computational techniques have been extensively studied for this purpose. However, most of them emphasize promoting the authorship attribution accuracy, and few works have been done for the purpose of constructing and visualizing the evidential traits. I opt for an interpretable and explainable approach by which writing styles can be visualized, compared, and interpreted by an investigator like fingerprints. I also propose to integrate differential privacy and reinforcement learning to paraphrase text where writing style is sanitized.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Binary Provenance Analysis</title>
      <link>https://l1nna.com/project/binary-provenance/</link>
      <pubDate>Wed, 12 Sep 2018 14:51:12 +0600</pubDate>
      
      <guid>https://l1nna.com/project/binary-provenance/</guid>
      <description>&lt;p&gt;Binary provenance denotes the &lt;em&gt;characteristics of a program that derives from its path from source code to executable form&lt;/em&gt;. Binary provenance is important in the domain of binary forensic and performance analysis. It provides important evidential trial for cybersecurity investigators to track down the hackers behind the security accidence. For example, the Lazarus group is linked to the Wannacry incidence by code similarity. I mainly focus on two critical aspects: &lt;em&gt;toolchain recovery&lt;/em&gt; and &lt;em&gt;authorship analysis&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Neural Malware Analysis</title>
      <link>https://l1nna.com/project/neural-malware-analysis/</link>
      <pubDate>Wed, 12 Sep 2018 14:51:12 +0600</pubDate>
      
      <guid>https://l1nna.com/project/neural-malware-analysis/</guid>
      <description>&lt;p&gt;Malware behavioral indicators denote those potentially high-risk malicious behaviors exhibited, such as unintended network communications, file encryption, keystroke logging, sandbox evasion, and camera manipulation. Generally, they are generated using sandboxes or simulators. However, the complexity of modern malware has been considerably increased. Malware is becoming sandbox-aware by incorporating modern evasive techniques. To address these issues, I propose a new neural network-based static scanner that can &lt;em&gt;characterize the malicious behaviors&lt;/em&gt; of a given executable, &lt;em&gt;without running it in a sandbox&lt;/em&gt;. It can be used as an additional binary analytic layer to mitigate the issues of polymorphism, metamorphism, and evasive techniques.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>